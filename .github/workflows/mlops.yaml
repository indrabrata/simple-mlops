name: "Simple MLOps Deployment 🚀"

permissions:
  contents: read
  packages: write
  security-events: write

on:
  push:
    branches: [master]
    paths-ignore:
      - "README.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "README.md"

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/iris-ml
  MODEL_ARTIFACT_NAME: model-artifact
  MLFLOW_ARTIFACT_NAME: mlflow-artifacts

jobs:
  test_and_train:
    runs-on: ubuntu-latest
    outputs:
      model-uploaded: ${{ steps.upload-model.outputs.artifact-uploaded }}
      mlflow-uploaded: ${{ steps.upload-mlflow.outputs.artifact-uploaded }}
    steps:
      - name: "Checkout code 📦"
        uses: actions/checkout@v4

      - name: "Set up Python 🐍"
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Set up SSH for ED25519
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p 11003 -H proxy.bccdev.id >> ~/.ssh/known_hosts

      - name: "Install deps for tests/training 📚"
        run: python -m pip install -r requirements.txt

      - name: "Download dataset 📥"
        run: |
          dvc pull

      - name: "Run data validation tests ✅"
        run: pytest -q tests/test_data_validation.py

      - name: "Run training (produce model artifact) 🤖"
        run: |
          mkdir -p models
          python -m src.train

      - name: "Run model tests ✅"
        run: pytest -q tests/test_model.py

      - name: "Run unit tests ✅"
        run: pytest -q tests/test_api.py

      - name: "Upload MLflow artifacts ⬆️"
        id: upload-mlflow
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MLFLOW_ARTIFACT_NAME }}
          path: mlruns/

      - name: "Upload Model artifacts ⬆️"
        id: upload-model
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MODEL_ARTIFACT_NAME }}
          path: models/

  build_and_publish:
    runs-on: self-hosted
    needs: test_and_train
    steps:
      - name: "Checkout code 📦"
        uses: actions/checkout@v4

      - name: "Download model artifact 📥"
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.MODEL_ARTIFACT_NAME }}
          path: ./models

      - name: "Set up Docker Buildx 🐳"
        uses: docker/setup-buildx-action@v3

      - name: "Login to GitHub Container Registry 🔑"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: "Build Docker image 🏗️"
        run: docker build -t "${{ env.IMAGE_NAME }}:${{ github.sha }}" ./deployment/Dockerfile.app

      - name: "Scan image with Trivy 🔍"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: "0"
          severity: "CRITICAL,HIGH"

      - name: "Upload Trivy scan results"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: "Run container health check 🏃"
        run: |
          docker run -d --rm -p 8000:8000 --name iris-test ${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 10
          curl -f http://localhost:8000/health || (docker logs iris-test && exit 1)
          docker stop iris-test

      - name: "Push Docker image 🚢"
        run: |
          docker tag "${{ env.IMAGE_NAME }}:${{ github.sha }}" "${{ env.IMAGE_NAME }}:latest"
          docker push "${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker push "${{ env.IMAGE_NAME }}:latest"
