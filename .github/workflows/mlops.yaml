name: "Simple MLOps Deployment üöÄ"

permissions:
  contents: read
  packages: write
  security-events: write

on:
  push:
    branches: [master]
    paths-ignore:
      - "README.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "README.md"

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/iris-ml
  MODEL_ARTIFACT_NAME: model-artifact
  MLFLOW_ARTIFACT_NAME: mlflow-artifacts
  DATA_PATH: ${{ secrets.DATA_PATH }}
  MODEL_DIR: ${{ secrets.MODEL_DIR }}
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  MLFLOW_S3_ENDPOINT_URL: ${{ secrets.MLFLOW_S3_ENDPOINT_URL }}

jobs:
  test_and_train:
    runs-on: ubuntu-latest
    outputs:
      model-uploaded: ${{ steps.upload-model.outputs.artifact-uploaded }}
      mlflow-uploaded: ${{ steps.upload-mlflow.outputs.artifact-uploaded }}
    steps:
      - name: "Checkout code üì¶"
        uses: actions/checkout@v4

      - name: "Set up Python üêç"
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Set up SSH for ED25519
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh 
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p 11003 -H proxy.bccdev.id >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: "Install deps for tests/training üìö"
        run: python -m pip install -r requirements.txt

      - name: Set up SSH for ED25519
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          ssh-keyscan -p 11003 -H proxy.bccdev.id >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Configure DVC remote with debug
        run: |
          echo "Current DVC remote config:"
          dvc remote list -v

          echo "Configuring DVC remote:"
          dvc remote modify myremote keyfile ~/.ssh/id_ed25519
          dvc remote modify myremote user dev
          dvc remote modify myremote port 11003
          if [ ! -z "${{ secrets.SSH_KEY_PASSPHRASE }}" ]; then
            dvc remote modify myremote passphrase "${{ secrets.SSH_KEY_PASSPHRASE }}"
          fi

          dvc remote list -v

      - name: Download dataset with debug
        run: |
          echo "Attempting DVC pull with verbose output..."
          echo $AWS_ACCESS_KEY_ID
          echo $AWS_SECRET_ACCESS_KEY
          echo $MLFLOW_S3_ENDPOINT_URL

          dvc pull -v

      - name: "Run data validation tests ‚úÖ"
        run: pytest -q tests/test_data_validation.py

      - name: "Run training (produce model artifact) ü§ñ"
        run: |
          mkdir -p models
          python -m src.train

      - name: "Run model tests ‚úÖ"
        run: pytest -q tests/test_model.py

      - name: "Run unit tests ‚úÖ"
        run: pytest -q tests/test_api.py

      - name: "Upload MLflow artifacts ‚¨ÜÔ∏è"
        id: upload-mlflow
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MLFLOW_ARTIFACT_NAME }}
          path: mlruns/

      - name: "Upload Model artifacts ‚¨ÜÔ∏è"
        id: upload-model
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MODEL_ARTIFACT_NAME }}
          path: models/

  build_and_publish:
    runs-on: ubuntu-latest
    needs: test_and_train
    steps:
      - name: "Checkout code üì¶"
        uses: actions/checkout@v4

      - name: "Download model artifact üì•"
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.MODEL_ARTIFACT_NAME }}
          path: ./models

      - name: "Set up Docker Buildx üê≥"
        uses: docker/setup-buildx-action@v3

      - name: "Login to GitHub Container Registry üîë"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: "Build Docker image üèóÔ∏è"
        run: docker build -t "${{ env.IMAGE_NAME }}:${{ github.sha }}" -f ./deployment/Dockerfile.app .

      - name: "Scan image with Trivy üîç"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: "0"
          severity: "CRITICAL,HIGH"

      - name: "Upload Trivy scan results"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: "Run container health check üèÉ"
        run: |
          docker run -d --rm -p 8000:8000 --name iris-test ${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 10
          curl -f http://localhost:8000/health || (docker logs iris-test && exit 1)
          docker stop iris-test

      - name: "Push Docker image üö¢"
        run: |
          docker tag "${{ env.IMAGE_NAME }}:${{ github.sha }}" "${{ env.IMAGE_NAME }}:latest"
          docker push "${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker push "${{ env.IMAGE_NAME }}:latest"
